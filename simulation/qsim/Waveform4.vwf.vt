// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/06/2023 11:16:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          batalha_naval
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module batalha_naval_vlg_vec_tst();
// constants                                           
// general purpose registers
reg confirmAttack;
reg cpld_clk;
reg [1:0] game_state_code;
reg nextMap;
reg [2:0] x_coord_code;
reg [2:0] y_coord_code;
// wires                                               
wire [3:0] display_colune_activator;
wire [6:0] display_colune_data;
wire [1:0] ledRgb;
wire [4:0] matriz_colune_activator;
wire [6:0] matriz_colune_data;

// assign statements (if any)                          
batalha_naval i1 (
// port map - connection between master ports and signals/registers   
	.confirmAttack(confirmAttack),
	.cpld_clk(cpld_clk),
	.display_colune_activator(display_colune_activator),
	.display_colune_data(display_colune_data),
	.game_state_code(game_state_code),
	.ledRgb(ledRgb),
	.matriz_colune_activator(matriz_colune_activator),
	.matriz_colune_data(matriz_colune_data),
	.nextMap(nextMap),
	.x_coord_code(x_coord_code),
	.y_coord_code(y_coord_code)
);
initial 
begin 
#3000000 $finish;
end 

// cpld_clk
always
begin
	cpld_clk = 1'b0;
	cpld_clk = #5000 1'b1;
	#5000;
end 

// nextMap
initial
begin
	nextMap = 1'b1;
end 
// game_state_code[ 1 ]
initial
begin
	game_state_code[1] = 1'b1;
end 
// game_state_code[ 0 ]
initial
begin
	game_state_code[0] = 1'b1;
	game_state_code[0] = #1500000 1'b0;
end 
// x_coord_code[ 2 ]
initial
begin
	x_coord_code[2] = 1'b0;
end 
// x_coord_code[ 1 ]
initial
begin
	x_coord_code[1] = 1'b0;
end 
// x_coord_code[ 0 ]
initial
begin
	x_coord_code[0] = 1'b1;
end 
// y_coord_code[ 2 ]
initial
begin
	y_coord_code[2] = 1'b0;
end 
// y_coord_code[ 1 ]
initial
begin
	y_coord_code[1] = 1'b0;
end 
// y_coord_code[ 0 ]
initial
begin
	y_coord_code[0] = 1'b1;
end 

// confirmAttack
initial
begin
	confirmAttack = 1'b0;
	confirmAttack = #1000000 1'b1;
	confirmAttack = #1000000 1'b0;
end 
endmodule

